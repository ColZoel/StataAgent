[
    {
        "filename": "all.do",
        "content": "if [ \"$1,$2\" != \"all,all\" ]; then\n\techo \"ERROR: old-style redo args detected: don't use --old-args.\" >&2\n\texit 1\nfi\n\n# Do this first, to ensure we're using a good shell\nredo-ifchange redo/sh\n\nredo-ifchange bin/all docs/all\n"
    },
    {
        "filename": "it.do",
        "content": "dependon rts sysdeps man\n"
    },
    {
        "filename": "redo.do",
        "content": "redo-ifchange redo.hs redo.cabal\ncabal-dev -v0 install\nmv cabal-dev/bin/redo $3\n"
    },
    {
        "filename": "to.do",
        "content": "(07:06:44 <aindilis> dmiles: I wrote the program for translating between nested\n      Prolog terms and logic forms.\n07:07:38 <dmiles> which dirrection?\n07:07:47 <aindilis> just finished it.  I'm not sure it will be suitable, but I\n      believe PDDL and FLUX are limited to Fluents, which are nonnested.\n      terms -> LFs\n07:08:20 <aindilis> I need to fix it up of course.  It's really ugly but can\n      always be rewritten later.\n07:10:19 <dmiles> i've stopped worring about ugly \n07:10:40 *** minsky (minsky@231-242-183-107.Static.PanicBNC.us) has quit: Ping\n      timeout: 258 seconds\n07:11:01 <dmiles> oh cool.. terms to LF would be nice for times we are trying\n      to show the user what prolog has in it\n07:11:32 <aindilis> %% swipl -s convert.pl -g\n      'convert(a(b(c,d),e,f(g,h,i(j,k,l(m,n)))),1,Result),see(Result)'\n07:11:40 <dmiles> i like the idea that if a person is working from LF that\n      they get to see LF as well\n07:12:45 <aindilis> %%\n      and(a(V1_1,V1_2,V1_5,V1_6),b(V1_2,V1_3,V1_4),c(V1_3),d(V1_4),e(V1_5),f(V1_6,V1_7,V1_8,V1_9),g(V1_7),h(V1_8),i(V1_9,V1_10,V1_11,V1_12),j(V1_10),k(V1_11),l(V1_12,V1_13,V1_14),m(V1_13),n(V1_14)).\n07:14:24 *** nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has\n      joined channel ##prolog\n07:14:48 <dmiles> is g V1_6 or V1_7?\n07:15:03 <aindilis> V1_7\n07:15:14 *** minsky (minsky@231-242-183-107.Static.PanicBNC.us) has joined\n      channel ##prolog\n07:15:18 <aindilis> the first arg is a \"self\"\n07:15:54 <dmiles> ah... i see yeah f/3 is now f/4 .. i like that btw\n07:18:20 <aindilis> still need to handle a(B), also, need to convert between\n      'V1_3' and V1_3 (atom to var), have modes where f(g(h)) is represented\n      and(f(V1_1,V1_2),g(V1_2,h)). and so on\n07:19:29 <aindilis> also handle []\n07:20:24 <aindilis> also need to know if it will have any use in PDDL, cause I\n      can't think it all the way through\n07:20:42 <aindilis> just going to start playing around and see if I can make\n      use of it\n07:21:01 <aindilis> maybe try to implement something of an interpretter in\n      pddl or flux\n##prolog> )\n\n(? means: This variable can be either instantiated or not. Both ways are possible.\n + means: This variable is an input to the predicate. As such it must be instantiated.\n - means: This variable is an output to the predicate. It is usually non-instantiated, but may be if you want to check for a specific \"return value\".\n )\n\n(it is logistics on top of logistics.  it is thinking up every\n contigency in advance and ...)\n\n(could in theory parse all files first for predicates, and then\n write and load a file declaring them (if they haven't been\n already) discontiguous or dynamic or what not, before loading\n them)\n\n(sometimeBetween([2017-01-05,11:54:22],[2017-01-05,11:54:23]))\n\n(need to have the ability to say that an appointment is going to\n be schedule between a certain time, so we have to keep that\n empty during planning, usually)\n\n(wopr should plan for what if someone leaves early during an\n appointment or such)\n(make appointments and other things be able to have durations)\n\n(make it so that when we query for an atom (such as with\n constant_apropos) it doesn't create it thereafter)\n\n(we might not know when something like going to sleep is going to\n happen, but we can put a high confidence interval, and plan with\n different incremements)\n\n(integrate the ability to load PrologMUD back into the main FLP,\n and load it in order to do things like parse sentences from\n texts for formalization)\n\n(need to get this to work:\n search_sentences_of_text(<BOOKIDENTIFIERCONSTANT>,<SEARCH>,Sentences).\n (wtf\n  (Prolog?: \n   > search_sentences_of_text(<BOOKIDENTIFIERCONSTANT>,<SEARCH>,Sentences).\n   Warning, sender <<<Agent1>>> not using updated protocol\n   $VAR1 = bless( {\n                 'DataFormat' => 'Perl',\n                 'Receiver' => 'temp-agent-0.489693685059564',\n                 'MyXMLDumper' => bless( {\n\t\t\t\t\t'perldata' => {},\n\t\t\t\t\t'xml_parser_params' => {},\n\t\t\t\t\t'xml' => {}\n\t\t\t\t\t}, 'XML::Dumper' ),\n                 'Data' => {\n\t\t '_AgentName' => 'Agent1',\n\t\t '_FormalogName' => 'Yaswi1',\n\t\t 'Result' => [\n\t\t\t      'error',\n\t\t\t      'instantiation_error',\n\t\t\t      [\n\t\t\t       'context',\n\t\t\t       [\n\t\t\t\t':',\n\t\t\t\t'system',\n\t\t\t\t[\n\t\t\t\t '/',\n\t\t\t\t 'atom_string',\n\t\t\t\t 2\n\t\t\t\t ]\n\t\t\t\t],\n\t\t\t       \\*{'::?122'}\n\t\t\t       ]\n\t\t\t      ]\n\t\t },\n                 'ID' => '0',\n                 'Date' => 'Tue Oct 25 13:56:32 CDT 2016',\n                 'Contents' => '',\n                 'Sender' => 'Agent1'\n\t\t }, 'UniLang::Util::Message' );\n   Prolog?: \n   > )\n  ))\n\n(on columcille\n (fix\n  (http://127.0.0.1:3000/frdcsa/planning_systems/conditional_plans)\n  (depends\n   (http://127.0.0.1:3000/frdcsa/planning_systems/dates)\n   (install julian))\n  (progn\n   (boss updatelinks formalog)\n   (boss updatelinks guardian)\n   )\n  \n  )\n )\n\n(figure out how to assert prolog rules into the free life planner\n as it is running, ie. something like:\n assert(:-(cap(Pattern),findall(Result,constant_apropos('has',Result),Results),see(Results))).)\n\n(Sign up for an account on here and you can get your social\n security information without having to go in and wait in line:\n https://www.ssa.gov/myaccount/)\n\n(We're going to have to figure out what to do when the model\n exceeds the available RAM.  we can have loadable and unloadable\n modules.  we can have distributed systems.  etc.  Look into what\n is already done with this for prolog.)\n\n(add info about what to shred and what to keep to FLP,\n via paperless-office)\n\n(FIXME: http://dev.freelifeplanner.org/frdcsa/planning_systems/dates\n 2016-7-8,12:0:0 (in 2 days)\n task(event2,decideOnTimeToMeet(andrewDougherty,jessBalint))\n task(event2,null))\n\n(add a sanity checker for dates to make sure the activity is\n appropriate to the time, so that if there is an error, such as\n entering 4:0:0 when 16:0:0 is meant.)\n\n(Put conditionals in life planner, if you haven't heard back from\n so and so by sunday, do X)\n\n(when it's time to send the message, send with: echo \"Reminder:\n You have an appointment at 6:30 PM on Tuesday September 15th,\n 2016 with Dr. So and So..  Click here to acknowledge:\n http://freelifeplanner.org/link\" | mail -r <EMAILADDRESS>\n <SMSRELAYEMAILADDRESS>)\n\n(For the next part, have it text a link along with a message,\n using that method of texting we had.  With the link, have it\n prompt the user for all the stuff.  The message in the text\n should indicate the upcoming event and so on.  Don't text for\n events super far in the future, prefer instead to remind them to\n log in and check their events.  Only if the event far in the\n future has tasks whose critical path backs up, although keep in\n mind that maybe such tasks exist and we don't have them stored\n yet in the system.  Maybe this is like working with partial\n information games.)\n\n(have an action type in the free life planner which responds to\n events.  like if internet isn't turned on by 9:00 am, call\n Comcast)\n\n(as part of the audience subsystem, have it keep a record of the\n status of all asked questions to and from others.)\n\n(Upgrades to life planner\n\n (have (contextFn ?X ?Y ?Z ...) so that we can do complex\n  contexts without filling up the FreeKBS2 Context list)\n\n (convert it from asserting things into the KB into using the\n  state variables)\n\n (make a web-based suppositional reasoner using flux state, gdl\n  or what not)\n\n (create a thing of upcoming deadlines for us to keep an eye on,\n  like a calendar, but better, with failure conditions in case we\n  don't including costs, etc.  Use FLUX nondeterminism to plan\n  for contingencies, get suppositional reasoner going and have\n  export to it for reasoning with.  Finish life planner)\n\n (Add a life planner rules editor, so that people can edit, in\n  English, various rules.  Have them mined potentially from texts\n  and have them edit them.  Have the ability to submit texts for\n  analysis to the life planner.)\n\n (Make it so that it has a log-in for anyone who wishes to use\n  it, based on lists of who I know exists and such, send them\n  email with credentials to their account.)\n\n (Make everything classified by default and have a\n  declassification program written in prolog/perl.)\n\n (Add default due dates.)\n\n (Create a KB Editor and Prolog Rule/Fact Editor - make them\n  reusable)\n\n (Need to enforce good boundaries)\n\n (Add to the free life planner a urls to visit as plan steps, and\n  what to do at each of those.  use c->uri_for or something\n  wrapping it to generate the appropriate url)\n\n (Akahige\n  (add the ability to add a new question for any of the doctors)\n  (add the ability to record the answer to a question, thus\n   removing the question from the pending questions list)\n  )\n\n (Gourmet/WSM\n  (add the ability to request a new food pantry inventory item)\n  (add the ability to say that we've found a new product acquired that satisfies a particular inventory requirement)\n  (add the ability to add a new instance of that product to our\n   inventory, and to make notes as to the condition of that\n   individual item)\n  )\n\n (Spending\n  (add the ability to log loans and gifts, also expenses)\n  )\n\n (Inventory Manager\n  (have an inventory interface which lists types of objects and\n   instances of those types, with the ability to increment and\n   decrement count etc.)\n  (Allow to list all the objects in a tree view consisting of\n   containers and supporters such as rooms, tables, boxes and bags))\n \n (Add a QnA for asking people questions, e.g. Doug Miles: do you\n  know of a way to do microtheories using modules)\n\n (Add the ability for a UniLang like (but private) system for\n  routing messages to the appropriate agents.  Maybe have a\n  completion grammar as with Dasher.)\n\n (Add a system for asserting appointments and tasks with\n  deadlines - have it be able to edit the task/appointment as\n  well, using an edit all kind of feature.)\n \n )\n\n(see\n/var/lib/myfrdcsa/codebases/minor/utility-maximization-system/data\nand action-planner stuff on food-security etc)\n\n(write tests to ensure that everything is loaded and functional)\n\n(use qsave to save the whole thing and load in seconds with a\n qlf, and then use an updater that updates any changes.  This\n makes it releasable.)\n\n(use this, if possible, to convert things to integers for CLPFD\n etc for FLUX\n /var/lib/myfrdcsa/codebases/minor/free-life-planner/doc/serpro.pl)\n\n(should know typically where I store certain items from history,\n and be able to suggest locations for them defeasibly)\n\n(as part of the pantry manager, have a system for estimating\n based on historical trends and different factors what remains of\n the inventory.)\n\n(there are many todo items for the free life planner in the main\n ~/to.do file)\n\n(noted elsewhere\n (progn\n  (completed (add better handling of logic of recurring tasks for\n\t      planForContigency(neg(eventually(completed())))))\n  (add multiuser)\n  (add interface for doing multiple actions on individual\n   assertions, both a low level admin and high level user\n   interface)\n  (remove test entries from KB)\n  (get non atom quoting working)\n  (develop FLP with an idea to enabling SAFE)\n  (add a values interface, for what we value as humans)\n  (develop the ability )\n  (develop a problem database)\n  (move over critical tasks from development to production, devel a synchronization mechanism)) (~/to.do))\n\n(put the full force of the FRDCSA as an agent at the disposal of\n the life planner, within reason for security)\n\n(Make use of mechanical turk for sourcing free life planner\n logic)\n\n(reread normal form documentation)\n\n(formalize the way Flora2 interfaces with FLP and Formalog)\n\n(the kmax-command-log should be capable of scrolling up to view\n it instead of jumping to the end. should use save-excursion or\n something to jump to the end.)\n\n(noted elsewhere (the situated-agent/packager-agent for emacs\n usage from kmax should be able to do Perl's Expect like\n reasoning from the CLI as input to FLUX for decision making.\n For instance, it should conceivably be able to execute commands,\n hrm forget which) (packager-agent))\n\n(make lookahead user configurable, etc)\n(when browsing the calendar, have it do a query for just that\n month's date ranges for recurrences)\n\n(have it store the previous window configuration to register if\n it doesn't already when it loads these window configurations.\n write a general protocol for handling loading window\n configuration, and easy to remember key-bindings for loading\n others, and reloading what was there previously, like a kill\n ring for window configurations)\n\n(Account for items that are exact repeats (and also inexact\n repeats) in multiple sources, such as unilang and to.do files)\n\n(noted elsewhere\n (WORK ON THE FOLLOWING:\n  (all previous life planner desiderata)\n  (having the ability to assert into KBS2::Reasoner::Prolog)\n  (making packager agent package files. have it have the ability\n   to execute linux commands)\n  (kmax-start-kmax-command-log-mode for programming by\n   demonstration, situated agent attempt controlling Emacs)\n  (make KBFS have persistence, and work against git)\n  (extend NLU notes-axiomatized.pro.  see UIMA Prolog mode)\n  (process the .bash_history using the bash grammar and Prolog\n   NLP, and use NLU to represent it and generate it to and from\n   the KB, using a planning process.  see older book on prolog\n   planning, try to get code from it.)\n  (finish recurrences, and have it plan out activities to a\n   certain depth, marking which ones have been generated, and which\n   ones have been acted on, etc\n   (implement dmiles version of skolems using thereExists)\n   )\n  ) (~/to.do))\n\n(it occurs to me now that the AI system must have ways of\n extending its KB for different common things, such as for\n learning new affordances for objects.  It shouldn't be given a\n static list but a dynamic one with the means to augment it.  This\n is true for all learnable things.\n (solution\n  (Maybe Cyc has some notion of learnab-{le,ility})\n  (constant-apropos learnab and learnib return nothing))\n )\n\n(In the course of my readings I came across a book on\n transactional psychotherapy, which looked at emotional games\n people play.  it was informative, but in particular their theory\n of games I thought would suit audience better than other things.\n Maybe there is a corpora for pscyhoanalyzed speech transcripts,\n which we could use to train such a system.  Still it seemed\n silly the way in which in another book on pscyhoanalysis the\n content was fixed and always a function of the dream and the\n person's history and not the person themself, who might have a\n different theory.  It seemed dictatorial in that regard.)\n\n(develop a system which summarizes and records the state of the\n system, and the priorities it has, at each point, in order to\n know what used to be important so we can know what should be\n important in the future.)\n\n(add the capability to search deal sites for items that match\n shopping list items and provide notifications when there is a\n good match)\n\n(have an accounting for all the facts in different queries and\n find out which facts aren't being utilized or fully utilized.)\n\n(use the inventory manager to denote which of other peoples stuff\n is with us and to ask them to pick it up)\n\n(write an SKSI system for accessing FreeKBS2 from within Cyc)\n\n(track in the system all the calls and verify their usage of\n secure instances)\n\n(write a function which allows me to search for a predicate using\n completion or some other methods, and then lists the files that\n define or contain that predicate.)\n\n(xdg-open /var/lib/myfrdcsa/codebases/minor/free-life-planner/data/12799150_10206183076956265_3729390916409242300_n.jpg)\n\n(integrate ball in court)\n\n(develop a file which lists which predicates belong to which files)\n\n(write a system for slurping to.do and notes.notes files into the\n free life planner.  for instance could load this file\n /var/lib/myfrdcsa/codebases/minor/frdcsa-2.0/requirements.notes\n as a bunch of assertions\n requirementForProject(frdcsa2,task('talk to Jess/Duke about\n ideas')) or something.  also have it load kbs files like this:\n /var/lib/myfrdcsa/codebases/minor/software-ontology/project-information/desired-capability.kbs\n )\n\n(\n sub FetchUserActualName {\n my ( $self, $c ) = @_;\n my $result = $c->model( 'FRDCSA' )->Query\n (\n  $c,\n  Eval => [\n\t   ['_prolog_list',\n\t    Var('?Agent'),\n\t    ['catalystUserNameResolvesToAgent',$c->user->username,Var('?Agent')]\n\t    ],\n\t   ],\n  );\n if (exists $result->[1]) {\n return $result->[1];\n }\n }\n )\n\n(<pre>\n Add Honey Do List Here...\n\n Assign Task to (make a drop down here of all the regular contacts of a\n\t\t person).\n\n Also come up with deadline information for the task.\n\n Hard or soft deadline.  Explanation of what these are.\n\n Look into information on organization and management.\n </pre>\n )\n\n(make an inventory type a collection of all instances of that\n inventory item)\n\n(start coming up with a documentation predicate, which explains things)\n\n(have to fix our declassification procedure because it doesn't\n allow scry to see the results for this unless Season is made\n ground (because it's binding to something in the\n\t isDeclassified) :\n \n ask(freeLifePlanner,andrewDougherty,hasSeason(Item,Season)) :-\n hasShoppingListItem(Person,Item).)\n\n(shopping rules\n (prioritize items that pertain to the upcoming season,\n  i.e. rocksalt for winter, if needed) \n (have something that juggles deals with needs)\n (tag luxury items as such, i.e. oral-b toothbrush)\n (make shopping analysis start now, rather than reviewing\n  existing items, so that it actually gets done.)  \n\n )\n\n(detect if the user is using an android browser and if so include this for the possibility of scanning things:\n (zxing://scan/?ret=http://foo.com/products/{CODE}/description&SCAN_FORMATS=UPC_A,EAN_13)\n (zxing://scan/?ret=[%- c.uri_for('scan/{CODE}/description&SCAN_FORMATS=UPC_A,EAN_13') -%])\n\n )\n\n(completed (add a debug feature which allows us to see the $c and so on))\n\n(integrate paperless office)\n\n(Develop audience module for logging phone calls to people, what\n is the force of the communication, what is the result, etc.\n have a plan ready for all communications or most.)\n\n(have a whereis functionality that we can search for files and\n stuff that we need for the life planner.  whereis atom, whereis\n fact, whereis rule (regex-search atom/fact/rule) context search\n etc)\n\n(ask Questions of ##prolog\n (rather create a log in and have the questions there, in audience)\n (how to check which file a particular rule/fact comes from\n  %% predicate_property(Predicate, imported_from(Module))\n  setof(Module,Predicate^predicate_property(Predicate, imported_from(Module)),Result),see(Result).\n  )\n (how to list which files have been loaded)\n (I use a lot of perl programs so all my programs end in .pl.\n  I'd like to differentiate them.  should I label them .P or .pro\n  or something? or .swipl  Plz advise.)\n )\n\n(rename everything to .pro or something so that it's more easily\n understandable, can differentiate with a locate. (frdcsa.flp? -\n seems flora2 already uses this extension))\n\n(figure out which file contains the stuff for resources)\n\n(come up with a set of features)\n\n(have it be aware of what files it is loading)\n(make an integrated search faculty)\n\n(add multiuser support)\n\n(add to audience the ability to verify the state of mail.  tie\n into paperless office.  Have a paperless office module for Free\n Life Planner.)\n\n(in progress (make a dashboard for audience))\n\n(make an NLU interface for editting annotations of a document)\n\n(make a unilang interface, for adding new unilang messages, for\n searching existing ones, etc)\n\n(completed (rename all the assertedTask1 items to differentiated\n names i.e. assertedTask135 etc))\n\n(make the life planner https)\n\n(create a realistic 3d model of the house, with the persons\n location, and relative locations and sizes etc of all the items)\n\n(make a simulated house with connections between the house, that\n is navigable in the editor)\n\n(create an interface that represents a particular room, with\n affordances.  for instance, if the room is a bathroom, make it\n easy to record that the room is getting low on handsoap)\n\n(integrate the planning domain with the world state monitor)\n\n(after putting a load into the laundry, put the load over later)\n\n(after going to check the email, enter the data into Audience\n about who sent what messages)\n(check email messages into audience - annotate what they require\n us to do)\n\n(Create a standard template system for tasks and events and such\n that gives the ability to edit them and so on, with affordances\n from the object affordance system.)\n\n(figure out what is causing it to have difficulty restarting)\n\n(use a link checking program to make sure everything works)\n\n(incorporate a thorough system of self-documentation and a help\n system looking up answers plus ways to record complaints about\n the way the system works to propagate to us so we can better\n implement it)\n\n(add a rule to the life planner when purchasing cell phone and\n laptop batteries that there are many fakes from China and such.)\n\n(when I start working on Free Life Planner, work on\n prioritize-features (see its to.do))\n\n(solution (find the code for tab completion of atoms in FLP,\n change to use current_atom/1) (mapped to C-c f f t, but make it\n so that it also does atoms, and can restrict only to predicates\n that we have defined.))\n\n(create MVC facsimile in Prolog)\n\n(add feature to prioritize features to record comparisons, and\n reload when reviewing or adding new ones)\n\n(have the system track the variable names\n\n (findall(Result,(current_predicate(_,M:P),catch(clause(M:P,Result),_,true)),Z),see(Z).)\n (with_output_to(string(Str), listing(member/2)),term_string(Term, Str).)\n\n (as this example shows they are helpful for understanding the assertions\n\n  (implies\n   (nthLargestElement ?DUR 1\n    (TheSetOf ?DIFF\n     (thereExists ?DATE1\n      (thereExists ?DATE2\n       (and\n\t(evaluate ?DIFF\n\t (TimeElapsedFn ?DATE1 ?DATE2))\n\t(thereExists ?Y\n\t (thereExists ?Z\n\t  (and\n\t   (isa ?Y ?COLLECTION)\n\t   (isa ?Z ?COLLECTION)\n\t   (dateOfEvent ?Y ?DATE1)\n\t   (dateOfEvent ?Z ?DATE2)\n\t   (laterThan ?DATE1 ?DATE2)\n\t   (unknownSentence\n\t    (thereExists ?MIDDLE\n\t     (thereExists ?EVT\n\t      (and\n\t       (isa ?EVT ?COLLECTION)\n\t       (dateOfEvent ?EVT ?MIDDLE)\n\t       (laterThan ?DATE1 ?MIDDLE)\n\t       (laterThan ?MIDDLE ?DATE2)))))))))))) AbsoluteValueFn)\n   (specifiedPropertyOfCollection Longest-Between ?COLLECTION ?DUR))\n\n  )\n )\n\n(figure out which files have loaded which assertions.  maybe\n write our own inclusion system which wraps the others, but logs\n that info)\n\n(add something to requestsLoanToCover to identify from whom we\n are asking, for instance, some people you would not ask for\n certain things from.  Have the life planner review this\n information, present in audience tab for the person)\n\n(have the ability to know if a fact is inferred or asserted, etc\n (and which rules inferred it if it is inferred) from the web\n interface as well)\n\n(have almost everything configurable from the web interface)\n\n(have bills understand different things like who pays for certain\n bills usually, splitting bills, different properties etc)\n\n(have the system know which facts and rules should be on an\n airgapped system and enforce that.  have it set up airgapped\n systems.)\n\n(with these queries that go through Formalog but contain keys,\n figure out how best to do complex links and such as with object\n oriented items, and the correct mapping between Prolog and Perl\n data structures)\n\n(reimplement Free-WOPR controller so it sends out one query to\n Guardian/Agent1 which gets generated from a predicate in FLP and\n has a hash like data structure of keys which are mapped to\n c.stash.<X> and contain the items.  So that it loads quicker\n than having two separate queries through the slow Formalog\n interface.)\n\n(develop a sort of templating system for Prolog output using TT\n that sends data to the stash by generating prolog \"hashes\" which\n contain the values for the template)\n\n(add different controls that make it easier to control, i.e. we\n don't have to write all the custom commands for Guardian, we can\n send that in from the model or the controller, depending.  add a\n view for Guardian CLI output)\n\n(have inventory reordering, have resource-manager tab, predict\n how much left we have.)\n\n(locate people via facebook who make good counterpoints, train a\n learning algorithm to identify good counterarguments to apply.\n E.g.  Craig A Bingham responded to a post that said:\n \"Tom Brokaw: When Brussels Was Attacked, Obama \u2018Stayed at the Baseball Game All Day Long\u2019\"\n with an image/meme that said\n \"GUESS WHERE RONALD REAGAN WAS WHEN 241 AMERICAN SOLDIERS WERE\n  KILLED IN BEIRUT\" \"ON VACATION AT THE AUGUSTA NATIONAL GOLF\n  CLUB.  HE STAYED THERE.\")\n\n(completed(task5).\n\n hasCompletionTime(task5,[2016-...]).\n hasCostOfCompletion(task5,dollars(31.26)).\n costOfPlanThroughDate(plan1,[2016-...],between(dollars(340.00),dollars(360.00))).\n costOfPlanThroughStep(...).\n \n )\n\n(have the ability to run whatIf scenarios out, such as, what if\n we stopped ordering jugs5Gallon and used tap water.  get a list\n of salient improvements/detriments)\n\n(have the inventory manager page.  have it tell us what\n consumables we are out of and should reorder, e.g. jugs5Gallon)\n\n(Have it have the ability to tell us, with the upcoming debts\n that we have, how much money we need to have by such and such a\n day.  have it automatically ask for loans as needed, refering to\n the page about what I need the loan for and the consequences of\n not getting the loan.  Enumerate the consequences, have\n invariants expressed in LTL/CTL* etc formulae.)\n\n(use adminlte invoice template  for loan requests)\n\n(For instance with putMoneyOn(debitCard), we should have a\n subsystem that looks at these and determines to what extent\n they've been grounded in the ontology.  Imagine that putMoneyOn\n is already defined in the ontology, but we're not using it\n correctly.  Or that it hasn't been defined, or that debitCard\n doesn't refer to anything.  The complete status of the\n translation from the pseudo-prolog-code into normalized/grounded\n PrologCYC/SUMO etc should be known, and an editor page in the\n system to assist with this process created.  Should probably be\n under frdcsa/codebases/internal/formalize{,2,3})\n\n(add a feature to contigencies that let us mark them as obsolete etc)\n\n(contingency)\n\n(look into the temporal war-gaming Doug mentioned: this seems to\n be the planning system Douglas was referring to:\n /var/lib/myfrdcsa/repositories/external/git/PrologVirtualWorlds/JPrologCafe/testing/start_swiprolog_unixbcd.pl)\n(/var/lib/myfrdcsa/repositories/external/git/PrologVirtualWorlds/JPrologCafe/testing/logicmoo_tap_plan.pl)\n\n(((((\n channel ##prolog\n11:59:00 <hppavilion[2]> I'm trying to make a Modal Logic Programming Language\n      (temporal)\n11:59:20 <dmiles> why is that?\n11:59:26 <hppavilion[2]> But I don't know what the constraints on a temporal\n      horn clause are, nor any useful algorithms for dealing with them. Can\n      anyone help?\n12:00:23 <hppavilion[2]> dmiles: Because it would be cool\n12:01:16 <dmiles> i know a small bit about it.  I am hoping that this is a\n      long term serious effort \n12:01:32 <hppavilion[2]> dmiles: I am too\n12:01:42 <hppavilion[2]> dmiles: But knowing me, I'm going to get distracted\n      in a week at most\n12:01:48 <hppavilion[2]> dmiles: I'm compiling it, BTW :)\n12:02:33 <hppavilion[2]> Because I recently started studying how compilers\n      work, and it's easier than I expected (at least to compile C-like\n      imperative language to my IL, which is ASMy)\n12:02:41 <dmiles> compiling it is fine .. you'll probly still want it to run\n      in a debugger someimes uncompiled\n12:02:54 <hppavilion[2]> dmiles: Yes, I was thinking I would do that\n12:03:15 <hppavilion[2]> dmiles: The AST will be interpretable AND compilable,\n      which shouldn't be too much more difficult\n12:04:17 <dmiles> well i'd start out witha  good constraint based horn clause\n      solver impl.. then add the temoral side as 2 new arguments\n12:04:49 <hppavilion[2]> Good idea\n12:05:11 <hppavilion[2]> dmiles: What are the common algorithms for solving\n      horn clauses?\n12:05:25 <dmiles> one method i know of uses a sort of generic modality.. when\n      i started adding the termporal in it came accrosed almost just like\n      quantification of a diamond and box ( poss & nesc)\n12:05:41 <dmiles> ?pttp\n12:05:41 <yesbot> Prolog Technology Theorem Prover\n12:05:42 <yesbot> http://www.ai.sri.com/~stickel/pttp.html\n12:06:02 <hppavilion[2]> Oooh :)\n12:06:08 <dmiles> that is a naive interative deeping method to solve horn\n      clauses and present proofs\n12:06:45 <hppavilion[2]> dmiles: Which TL should I use as a basis? LTL, CTL,\n      or CTL*?\n12:07:11 <hppavilion[2]> CTL* is the most powerful of the three AFAWPTM, but\n      it'd also be the most complicated\n12:07:16 <dmiles> i've always just use CTL but i want to leanr and use CTL* \n12:07:48 <hppavilion[2]> dmiles: I'm thinking of going with the Open World\n      Assumption. Is that a good idea?\n12:08:05 <dmiles> actualyl maybe i only used LTL.. i'll check in a bit\n12:08:55 *** dos (~DevourerO@58-0-174-206.gci.net) has joined channel ##prolog\n12:08:58 <dmiles> i have a tough time knowing when people say CWA vs OWA which\n      they meant :)\n12:09:19 *** dos (~DevourerO@58-0-174-206.gci.net) is now known as\n      hppavilion[1]\n12:09:43 <dmiles> i did it the simpler of the two ways a couple times and it\n      turns out to do it better the correct way\n12:10:03 <hppavilion[1]> dmiles: I like it, because it doesn't mean that\n      something which cannot be proven is false (which is probably a good\n      thing for debugging), but it also likely has some downsides (namely,\n      things you want to be false have to be explicit, I think)\n12:10:27 <dmiles> ah yeas then OWA it is\n12:10:42 <dmiles> so i have come to a conclusion that i need to compile in OWA\n      even thugh CWA seems enough\n12:10:53 <dmiles> seemed*\n12:11:29 <dmiles> what i mean by that is i have to  query the negation as well\n      as the postive and get results back to trust either\n12:12:22 *** hppavilion[2] (~DevourerO@58-0-174-206.gci.net) has quit: Ping\n      timeout: 244 seconds\n12:12:30 <dmiles> meaning   \"dogs my dog like Alpo\"  +  \"is it false that my\n      dog doesnt like Aplo\"\n12:13:32 <hppavilion[1]> Ah\n12:13:33 <dmiles> well more like this:  \"does my dog like Alpo?\"  +  \"is it\n      imposible that my dog doesnt like Alpo?\"\n12:13:37 <hppavilion[1]> That does look inefficient\n12:13:52 <dmiles> yes but in the mid term its way way more effecient\n12:14:31 <hppavilion[1]> Ah\n12:14:48 <dmiles> though this means you have to cache and optimize the\n      imposible with lots of singlton vars\n12:16:35 <dmiles> example:    impossibleDurring(Fact,When):-\n      factStartsToHappen(Fact,Start),When<Start.\n12:16:56 <dmiles> oops that not exmaple of singleton vars\n12:17:31 <dmiles> more like:  impossible(mother(_,M)):- father(M).\n12:18:14 *** Riviera- (Riviera@2a03:b0c0:1:d0::10:b001) has quit: Ping\n      timeout: 260 seconds\n12:19:01 <dmiles> so the way you are thinking termproal come into modally.. I\n      have leanrd that posibility is just as important\n12:19:25 <dmiles> to be \"compiled in\"\n12:19:42 <dmiles> but luckily this come in the same ways\n12:20:44 <dmiles> that sesc/poss logic is just as important as temporl logic\n12:21:24 <dmiles> to neglect either is full of lots of dangers \n12:21:42 *** q_bert_ (~hubert@186.77.161.228) has joined channel ##prolog\n12:23:29 *** q_bert (~hubert@186.77.173.246) has quit: Ping timeout: 260\n      seconds\n12:24:30 <dmiles> i mean it might be obvious that without OWA the system would\n      be unreliable\n12:25:43 <dmiles> just like the examples where the lack of termporal logic\n      make a system silly and toy\n12:27:28 <dmiles> a few years ago i extended pttp to deal with this data:\n      https://github.com/opensim4opencog/PrologVirtualWorlds/blob/master/ontologies/kif/DesertShieldMt.kif\n12:27:32 <yesbot> Title: PrologVirtualWorlds/DesertShieldMt.kif at master \u00b7\n      opensim4opencog/PrologVirtualWorlds \u00b7 GitHub (3.93s)\n12:27:32 <yesbot> http://tinyurl.com/h2npucw (0.26s)\n12:28:57 <dmiles> as you see, quite a bit of temporal reasoning was\n      required.. the system job was to predict and simulate outcomes if\n      diffenrt world actors behaved ifferntly\n12:30:22 <dmiles> i compiled that data to horn clauses\n12:30:45 *** q_bert (~hubert@186.77.164.115) has joined channel ##prolog\n12:30:50 *** Riviera- (Riviera@2a03:b0c0:1:d0::10:b001) has joined channel\n      ##prolog\n12:33:04 *** q_bert_ (~hubert@186.77.161.228) has quit: Ping timeout: 240\n      seconds\n12:33:08 <dmiles> then the i'd ask it several questions.. and it would reply\n      back with results.. if the results seemed absurd.. i might teach it\n      something more common sensical and ask again \n12:34:05 <dmiles> oh the replies are accompanied by \"proofs\" of why it can\n      belive what it believed .. so sometimes one can refine the axioms at\n      that level\n12:35:27 *** Zekka (~zekka@ip24-251-69-145.ph.ph.cox.net) has quit: Ping\n      timeout: 276 seconds\n12:35:36 <dmiles> i tried the type of horn clause resolution methods they\n      teach in school today and i also tried methods that Stickle used\n12:36:08 *** hppavilion[1] (~DevourerO@58-0-174-206.gci.net) has quit: Ping\n      timeout: 244 seconds\n12:39:38 *** RLa (~RL@82.131.127.254.cable.starman.ee) has quit: Quit: Leaving\n12:40:23 <dmiles> stickle compiles in \"sanity clauses\" .. nowadays those\n      sanity clauses are left out in favor of smaller simpler (faster?)\n      resolution.  but in practice the \"sanity clauses\" allow the system to\n      avoid absurd routes and thus enable the system to search a wider range\n      of possiblities and explore (and construct) more interesting conjectures \n12:41:23 <dmiles> and also deal with us humans proposed absurd routes\n12:41:37 *** xyh (~xieyuheng@111.50.70.142) has joined channel ##prolog\n12:42:51 <dmiles> which are usually sylligisms created by underspecification\n      that comes from trying to ontologise and generalize our knowlege \n12:43:43 * dmiles knows he left but feels lucid and finaly like he knows how\n      to explain the software P\n12:45:32 <dmiles> \"explore (and construct) more interesting conjectures \" <- i\n      said the software does that?  Yes, not that it is creative.. it is that\n      by selecting a single axiom of choice at each step.. it might start to\n      build a construction that we had not intended to be made\n12:46:30 *** hppavilion[1] (~DevourerO@74-114-87-90.dynamic.asdk12.org) has\n      joined channel ##prolog\n12:46:52 <dmiles> hppavilion[1]: let me know the last comment by me was\n12:47:00 <dmiles> (that you saw)\n12:47:15 <hppavilion[1]> dmiles: \"i compiled that data to horn clauses\"\n12:48:26 <dmiles>  then the i'd ask it several questions.. and it would reply\n      back with results accompanied by \"proofs\" of why it can belive what it\n      believed .. so sometimes one can refine the axioms at that level\n12:49:18 <dmiles>  i tried the type of horn clause resolution methods they\n      teach in school today and i also tried methods that Stickle used\n      .. stickle compiles in \"sanity clauses\" .. nowadays those sanity clauses\n      are left out in favor of smaller simpler (faster?) resolution.  but in\n      practice the \"sanity clauses\" allow the system to avoid absurd routes\n      and thus enable the system to search a wider range of \n12:49:19 <dmiles> possiblities and explore (and construct) more interesting\n      conjectures  \n12:50:00 <dmiles>  the software does that?  Yes, not that it is creative.. it\n      is that by selecting a single axiom of choice at each step.. it might\n      start to build a construction that we had not intended to be made\n12:51:35 <dmiles> \"sanity clauses\" avoid these sylligisms created by\n      underspecification that comes from trying to ontologise and generalize\n      our knowlege \n12:52:02 *** Zekka (~zekka@150.135.210.122) has joined channel ##prolog\n12:52:38 <dmiles> not only that .. some of the data/knowledge we put into a\n      system might be wrong\n12:53:17 <dmiles> so compiling for the OWA helps detect that\n12:55:10 <hppavilion[1]> dmiles: Wait. Could we just do LTL logic programming\n      by having a hidden variable for every predicate called \"time\"?\n12:55:19 <dmiles> yes\n12:55:31 <hppavilion[1]> So OOOp(x) becomes p(x, 3)\n12:55:38 <hppavilion[1]> (O is NEXT)\n12:55:48 *** xyh (~xieyuheng@111.50.70.142) is now known as xdf\n12:56:03 <dmiles> that is probably exactly what we do.. for some reason i was\n      aying 2 vars .. but 1 actualyl works.\n12:56:16 <dmiles> aying/saying\n12:58:13 *** xdf (~xieyuheng@111.50.70.142) is now known as xyh\n12:59:37 <dmiles> here is the impl of a termproal reasoner i did..\n      https://github.com/opensim4opencog/PrologVirtualWorlds/blob/dmiles/logicmoo/src/logicserver/moo_sentence.pl#L17  \n12:59:38 <yesbot> Title: PrologVirtualWorlds/moo_sentence.pl at dmiles \u00b7\n      opensim4opencog/PrologVirtualWorlds \u00b7 GitHub (0.91s)\n12:59:40 <yesbot> http://tinyurl.com/hnnxfdz (2.14s)\n13:00:19 <hppavilion[1]> dmiles: So I got it to compile expressions\n      (arithmetical, that is), but I don't know the first thing to do for\n      compiling relations and facts\n13:00:31 *** xyh (~xieyuheng@111.50.70.142) has quit: Remote host closed the\n      connection\n13:00:42 <hppavilion[1]> dmiles: I'm trying to read papers on it, but I'm\n      having trouble understanding them\n13:00:58 <dmiles> the pttp is a good introduction to what it looks and feels\n      like codewise\n13:01:06 <hppavilion[1]> OK\n13:01:17 <hppavilion[1]> dmiles: I'm writing the compiler in Python, BTW xD\n13:01:39 <dmiles> the first i did when i got ahold of pttp.. is i converted it\n      from a compiler to a interpretor :P\n13:01:43 <hppavilion[1]> dmiles: Dammit, it's all PS\n13:02:20 <dmiles> ghostview\n13:02:42 <hppavilion[1]> dmiles: That's what I was thinking, but I don't know\n      if I have it installed, and I don't feel like installing anything new\n      right now. But I'll check.\n13:02:50 <qu1j0t3> or, convert to pdf. OS X Preview can do it, most likely\n      there's something like that on Windows.\n13:02:50 <hppavilion[1]> Yep, I have it\n13:03:33 *** T_K (~Tambet@82.131.60.239.cable.starman.ee) has joined channel\n      ##prolog\n13:04:52 <dmiles> i was thinki ng the NLTK had theorem rovers in it\n13:05:00 <dmiles> provers*\n13:05:46 <dmiles> funny i found some old papers/emails of my coworkers\n      discussing cyc.. and we call it no more thna a theorem prover\n13:06:13 <dmiles> for lack of a better name\n13:06:44 <dmiles> yet it has nothing to do with mordern theorem proving :) \n13:07:43 <dmiles> what the software does is \"gives a proof\" based on a users\n      \"theory\"\n13:08:02 <dmiles> but in order to do that it has to theorize quite a bit for\n      itself\n13:08:37 <dmiles> and it constructs programs (called proofs) that make the\n      theory possible\n13:09:26 <dmiles> i am so confused to what software out there exists besides\n      Cyc that is supposed to do the same thing\n13:10:46 <dmiles> (and besides what i am trying to make  and made at my last\n      URL)\n13:12:04 <dmiles> the funny part is 30% of my code and impl is borrowed from\n      modern theorem proving techniques \n13:12:15 <dmiles> (and Cyc's code)\n13:12:33 <dmiles> (i mean Cyc's code is 30% the modern theorem provers code)\n13:16:14 <dmiles> the 70% of outr codeebase are anchient theorem proving code\n13:16:49 *** hppavilion[1] (~DevourerO@74-114-87-90.dynamic.asdk12.org) has\n      quit: Ping timeout: 252 seconds\n13:20:08 <dmiles> i guess no one is going to make this software for me\n13:21:12 <dmiles> unless it is about number theory \n13:30:58 *** hppavilion[1] (~DevourerO@74-114-87-90.dynamic.asdk12.org) has\n      joined channel ##prolog\nERC>\n)\n\n(get RCyc-1.0 and RCyc-4.0q running at the same time, and then\n use the RCyc-1.0 to bootstrap translations to Cyc)\n\n(have the ability for people to suggest courses of action, and\n the AI to evaluate them)\n\n(add something that estimates what the epistemic effect of\n omission of classified info will have in different contexts,\n such as nonmonotonic linguistic contexts)\n\n(look into the commands that Doug told us about for generating\n English glosses)\n\n(improve our notion of classified predicate to be classified to\n certain defined groups, such as all friends of a certain set of\n people, etc)\n\n(implement a bunch of conditions for what happens if we don't\n maintain the resource-manager conditions - write it as flux\n state updates perhaps)\n\n(write a function called term_contains_subterm which we can use\n to make sure that subterms don't unify with a given term, which\n we can use to screen the results of scry to prevent it from\n listing terms that have been marked as classified, etc.)\n\n((solution (translate this to English, then bootstrap conversion\n\t    to Cyc ontology using RCyc 1.0:\n\t    unpreparedForContingency(neg(eventually(completedTask(developResponsePlanFor(whatIf(loses(andrewDougherty,eyesight))))))).) (We\n\t    are unprepared for the contingency that we never\n\t    complete the task of developing a response plan for\n\t    what to do if Andrew loses his eyesight.))\n\n (We are unprepared for the contingency that we never complete the task of developing a response plan for what to do if Andrew loses his eyesight.)\n\n ((#$thereExists ?WE2\n   (#$and\n    (#$isa ?WE2\n     (#$ThingDescribableAsFn\n      (#$WordFn \"unprepared\")\n      #$Adjective))\n    (#$isa ?WE2\n     (#$ThingDescribableAsFn\n      (#$WordFn \"we\")\n      #$Noun))\n    (#$thereExists ?COMPLETE15\n     (#$and\n      (#$isa ?COMPLETE15\n       (#$ThingDescribableAsFn\n\t(#$WordFn \"complete\")\n\t#$Verb))\n      (#$isa ?COMPLETE15 #$Situation)\n      (#$doneBy ?COMPLETE15 ?WE12)\n      (#$patient-Generic ?COMPLETE15 ?TASK19))))))\n\n (I am unprepared for that.)\n\n CYC(1): (cyclify \"We are unprepared for the contingency that we never complete the task of developing a response plan for what to do if Andrew loses his eyesight.\")\n ((#$thereExists ?WE2 (#$and (#$isa ?WE2 (#$ThingDescribableAsFn (#$WordFn \"unprepared\") #$Adjective)) (#$isa ?WE2 (#$ThingDescribableAsFn (#$WordFn \"we\") #$Noun)) (#$thereExists ?COMPLETE15 (#$and (#$isa ?COMPLETE15 (#$ThingDescribableAsFn (#$WordFn \"complete\") #$Verb)) (#$isa ?COMPLETE15 #$Situation) (#$doneBy ?COMPLETE15 ?WE12) (#$patient-Generic ?COMPLETE15 ?TASK19))))))\n (NIL) \n CYC(2): (cyclify I am unprepared for that.)\n\n Error: I does not have a value.\n [Switching to single-threaded mode ....]\n\n Select a restart:\n 0: Return to top-level read loop.\n 1: Recursive read loop.\n 2: Signal the debugger.\n 3: Exit program.\n ? 0\n [Resuming multi-threaded mode ....]\n CYC(2): (cyclify \"I am unprepared for that.\")\n ((#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"unprepared\") #$Adjective)) (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)))))\n (NIL) \n CYC(3): (cyclify \"I am unprepared.\")\n ((#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"unprepared\") #$Adjective)) (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)))))\n (NIL) \n CYC(4): (cyclify \"I am a dog.\")\n ((#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)) (#$isa ?I2 #$Dog))) (#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)) (#$isa ?I2 #$HotDog))))\n (NIL NIL) \n CYC(5): (cyclify \"The person went to the store.\")\n ((#$and (#$isa (#$InstanceFn \"?PERSON4\") #$Person) (#$thereExists ?WENT5 (#$and (#$isa ?WENT5 #$Movement-TranslationEvent) (#$toLocation ?WENT5 (#$InstanceFn \"?STORE10\")) (#$primaryObjectMoving ?WENT5 (#$InstanceFn \"?PERSON4\")) (#$isa (#$InstanceFn \"?STORE10\") #$RetailStore)))) (#$and (#$isa (#$InstanceFn \"?PERSON4\") #$Person) (#$thereExists ?WENT5 (#$and (#$isa ?WENT5 #$Movement-TranslationEvent) (#$toLocation ?WENT5 (#$InstanceFn \"?STORE10\")) (#$primaryObjectMoving ?WENT5 (#$InstanceFn \"?PERSON4\")) (#$isa (#$InstanceFn \"?STORE10\") #$RetailStoreSpace)))) (#$and (#$isa (#$InstanceFn \"?PERSON4\") #$Person) (#$isa (#$InstanceFn \"?STORE10\") #$StorageOfSomethingForFutureUse) (#$isa (#$InstanceFn \"?STORE10\") #$CourseOfStudy) (#$beneficiary (#$InstanceFn \"?STORE10\") (#$InstanceFn \"?PERSON4\"))))\n (NIL NIL NIL) \n CYC(6): (cyclify \"The person wasn't ready.\")\n ((#$and (#$isa (#$InstanceFn \"?PERSON4\") #$Person) (#$not (#$isa :NOUN #<(#$ThingDescribableAsFn #$Ready-TheWord #$Adjective)>))))\n (NIL) \n CYC(7): (cyclify \"The person was not ready.\")\n ((#$and (#$isa (#$InstanceFn \"?PERSON4\") #$Person) (#$not (#$isa :NOUN #<(#$ThingDescribableAsFn #$Ready-TheWord #$Adjective)>))))\n (NIL) \n CYC(8): (cyclify \"The plan failed.\")\n ((#$and (#$isa (#$InstanceFn \"?PLAN4\") #$ArchitecturalPlan) (#$failureForAgents (#$InstanceFn \"?PLAN4\") ?AGENT)))\n (NIL) \n CYC(9): (cyclify \"The plan failed.\")\n ((#$and (#$isa (#$InstanceFn \"?PLAN4\") #$ArchitecturalPlan) (#$failureForAgents (#$InstanceFn \"?PLAN4\") ?AGENT)))\n (NIL) \n CYC(10): (cyclify \"I am unprepared.\")\n ((#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"unprepared\") #$Adjective)) (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)))))\n (NIL) \n CYC(11): (cyclify \"I never finished.\")\n ((#$thereExists ?I2 (#$and (#$isa ?I2 (#$ThingDescribableAsFn (#$WordFn \"i\") #$Noun)) (#$thereExists ?FINISHED6 (#$and (#$isa ?FINISHED6 (#$ThingDescribableAsFn (#$WordFn \"finished\") #$Verb)) (#$isa ?FINISHED6 #$Situation) (#$doneBy ?FINISHED6 ?I2) (#$isa ?FINISHED6 (#$ThingDescribableAsFn (#$WordFn \"never\") #$Adverb)))))))\n (NIL) \n CYC(12): (cyclify \"The task is not complete.\")\n ((#$and (#$isa (#$InstanceFn \"?TASK4\") #$AssignedTaskType) (#$not (#$isa :NOUN #<(#$ThingDescribableAsFn #$Complete-TheWord #$Adjective)>))) (#$and (#$isa (#$InstanceFn \"?TASK4\") (#$SubcollectionOfWithRelationToTypeFn #$Assignment-Specification #$performerInSpec #$IntelligentAgent)) (#$not (#$isa :NOUN #<(#$ThingDescribableAsFn #$Complete-TheWord #$Adjective)>))) (#$and (#$isa (#$InstanceFn \"?TASK4\") #$Undertaking-WorkingEvent) (#$not (#$isa :NOUN #<(#$ThingDescribableAsFn #$Complete-TheWord #$Adjective)>))))\n (NIL NIL NIL) \n CYC(13): \n\n ;; (#$SubcollectionOfWithRelationToTypeFn #$Assignment-Specification #$performerInSpec #$IntelligentAgent)\n ;; #$Undertaking-WorkingEvent\n )   \n\n\n(alter the hostname on freelifeplanner.org's VM from\n panoply2.frdcsa.org to something like flp.frdcsa.org/or\n something less conflicting)\n\n(solution (Develop a method whereby users can have money sent to\n them via the ShinyCMS shoppingcart, and a microloan system for\n people in impoverished countries.  Have a shopping cart utility\n for purchasing things for the user.) (use the shiny_cms\n shop_item table for this.  for recurring purchases, look into\n keeping the item in the DB.  for single purchases, look into\n pulling it from the DB as soon as complete))\n\n(figure out how prologcyc handles the values of functions)\n\n(implement english glosses, translate to prologcyc terms)\n\n(see if there isn't a newer catalyst book)\n(read the catalyst book)\n(complete the model)\n(parameterize the interface)\n\n(make a backup of the previous version of\n free-fluxplayer/attempts/3, make the current 3 into 3b)\n\n(the freelifeplanner should have a checkin feature where you\n check in after traveling somewhere, and if you don't it tries to\n get a hold of you and if not gets ahold of emergency contacts)\n\n(run M-x free-life-planner from within X windows in order for\n planning to work, detach this dependency eventually)\n\n(sudo cpanm Storable)\n\n(add support to life planner for honey do and other lists)\n\n(read a book on Catalyst, and Prolog)\n\n(completed (Have the ability to add contigencies to plan for via\n the life planner.))\n\n(do text processing of email to try to identify named entites and\n such that identifies possessions and world state, and have the\n user annotate them in the My->Self part.  Have this hook up\n through audience)\n\n(integrate temporal planning capabilities.  make a separate\n system for that.)\n\n(have a template for checklists and quizzes to ask the user)\n\n(have a property for determining whether a given predicate is\n stored in flux state variable/domain or regularly included)\n\n(reintegrate the loading of the facts)\n\n(troubleshoot why FLUX-SWI is not working right now)\n\n(for our controllers for existing systems, be sure to also put\n the menu item describing it in the title, so people don't become\n confused)\n\n(we can have the life planner read out a state variable to a\n module by first clearning the module with retractall, then\n adding with asserts, and then read it out using the tools we\n written so far)\n\n(Added extraction of fluents from module.  Be sure to also later\n get rules, as well as make the code, which I seem to have to\n insert directly into the module itself, be loadable using an\n include in the module.)\n\n(\npred_for_m(M,IntoVar):- findall((P :- B) ,(\ncurrent_predicate(_,M:P), \\+ predicate_property(M:P,imported_from(_)),\npredicate_property(M:P,number_of_clauses(_)), clause(M:P,B)),IntoVar).\n% the  number_of_clauses/1 wil avoid an error\n)\n\n(put reminder to vacuum floor, go to food pantry)\n\n(life planner\n (first rule:\n  (consequence of staying up too late the night before, too tired))\n (second rule: at least once a day, check the bank balance, might\n  end up having less money than I think, which might cause an\n  emergency)\n (have the ability to say that something was done at least once\n  during a day, for variable definitions of day, such as waking\n  cycle, versus actual hours, etc.)\n (for it to know when my library books are due, what library they\n  are from, and for it to remind me continually before they are\n  due, like 6 days before 4, 2, day of etc.))\n\n(Take the different papers that the government gives us and\n formalize them into the system.  try to have all alethic\n possibilities covered.)\n\n(translate only as needed between the term representation and the\n fluents representation)\n\n(Is there a way convert between nested fluents and logic forms)\n\n(try to figure out if flux can do nested fluents)\n\n(PrologMUD can have timeouts set with call_with_depth_limit/3\n call_with_timelimit/2)\n\n(FreeLifePlanner: come up with dashboard for bills and show all\n things.  also make crises first class objects and treated, like\n contingencies.)\n(look into Service Contracts in Logic Programming formalisms for\n Resource-Manager e.g. RBSLA)\n\n(noted elsewhere (FreeLifePlanner use case: surviving a\n war) (fluents_data.pl))\n"
    },
    {
        "filename": "make.do",
        "content": "// the 'make.do' file is automatically created by 'github' package.\n// execute the code below to generate the package installation files.\n// DO NOT FORGET to update the version of the package, if changed!\n// for more information visit http://github.com/haghish/github\n\nmake github, replace toc pkg  version(2.3.0)                             ///\n     license(\"MIT\")                                                      ///\n     author(\"E. F. Haghish\")                                             ///\n     affiliation(\"University of G\u00f6ttingen\")                              ///\n     email(\"haghish@med.uni-goettingen.de\")                              ///\n     url(\"https://github.com/haghish/github\")                            ///\n     title(\"github package manager\")                                     ///\n     description(\"search, install, and manage github packages\")          ///\n     install(\"abspath.ado;abspath.sthlp;githubfindall.ado;\"              ///\n     \"githubfindall.sthlp;wdpermissions.ado;\"                            /// \n\t\t \"gitget.ado;gitget.dta;gitget.sthlp;gitgetlist.ado;github.ado;\"     ///\n\t\t \"github.dlg;github.sthlp;githubcheck.ado;githubconfirm.ado;\"        ///\n\t\t \"githubdb.ado;githubdependency.ado;githubfiles.dta;\"                ///\n\t\t \"githubhot.ado;githublistpack.ado;githublistpack.sthlp;\"            ///\n\t\t \"githuboutput.ado;githubquery.ado;githubsearch.ado;\"                ///\n     \"make.ado;make.sthlp;make.dlg;makedlg.ado;\"                         ///\n\t\t \"githubmake.ado;githubsearchsteps.ado;githubcheckfilename.ado\")     ///\n     ancillary(\"gitget.dta;githubfiles.dta\")                                                  \n\n\n/*\nGenerating the package documentation\n====================================\n\nThe package documentation is written in Markdown language. \nThe MARKDOC package extract these documentation and \ncreate the Stata help files as well as Markdown \ndocumentation for GitHub Wiki. Learn more about MARKDOC\nhere: https://github.com/haghish/markdoc\n\nGenerating Stata Help Files\n---------------------------\n*/\n\nmarkdoc \"github.ado\", mini export(sthlp) replace\nmarkdoc \"gitget.ado\", mini export(sthlp) replace\nmarkdoc \"githublistpack.ado\", mini export(sthlp) replace\nmarkdoc \"abspath.ado\", mini export(sthlp) replace\nmarkdoc \"githubfindall.ado\", mini export(sthlp) replace\n\n/*\nGenerating markdown files for GitHub Wiki\n-----------------------------------------\n*/\n\nmarkdoc \"github.ado\", mini export(md) replace\nmarkdoc \"gitget.ado\", mini export(md) replace\nmarkdoc \"githublistpack.ado\", mini export(md) replace\nmarkdoc \"abspath.ado\", mini export(md) replace\nmarkdoc \"githubfindall.ado\", mini export(md) replace\n\n/*\nGenerating the package vignette\n-----------------------------------------\n*/\n\nmarkdoc \"vignette.do\", mini export(html) replace                             ///\n        title(\"github v. 2.0.0 package vignette\")                            ///\n\t\tauthor(\"E. F. Haghish\")                                              ///\n\t\taffiliation(\"University of Goettingen\")                              ///\n\t\taddress(\"haghish@med.uni-goettingen.de\") \n\nmarkdoc \"vignette.do\", export(tex) toc replace master                        ///\n        title(\"github v. 2.0.0 package vignette\")                            ///\n\t\tauthor(\"E. F. Haghish\")                                              ///\n\t\taffiliation(\"University of Goettingen\")                              ///\n\t\taddress(\"haghish@med.uni-goettingen.de\") \n\n\n\n\n"
    },
    {
        "filename": "@all.do",
        "content": "b=$(basename $0)\nb=${b#@}\nb=${b%.do}\nexec $(dirname $0)/$b\n"
    },
    {
        "filename": "dl.do",
        "content": "dl \"DeskLink for *nix\"\n\nDescription\n-----------\ndl is a program for *nix users which has (or will have) the same capabilities as\nDeskLink for DOS.  That is, act a PPD disk drive for your Model T laptop.\n\nUsage\n-----\nCurrently, there are two ways of running dl, as a getty replacement, or\nfrom a command-line.  The getty replacement method allows an \"always on\" drive\nwhereas the command-line allows you to start and stop the service at will.\n\nTo set dl up as a getty replacement,\nyou'll need to edit /etc/ttys and add\na line somewhat like the following:\n\nttyd0   \"/home/m100/dl/dl -g\"              m100    on insecure\n\n(see ttys(5) for more information)\nthen send a HUP signal to the init process like so:\n\nkill -HUP 1\n\nTo run from a command-line, you pass the tty device name as the ONLY\nargument to dl for example:\n\n./dl ttyd0\n\nTo stop, just press ^C\n\n-v will provide reams of useless info about what's going on.\n\nCompiling\n---------\nTo compile a getty replacement, use the command:\n\nmake\n\nUsing the loader function\n-------------------------\nExecuting the following command from BASIC will load and run \"loader.ba\"\nwithout needing a DOS loaded on the laptop.  This is how I load TEENY\n\nOPEN\"COM:98N1D\"FOROUTPUTAS1:?#1,\"XX\";:RUN\"COM:98N1D\n\nTo create the loader.ba file, run the teeny program (available from\nhttp://m100.bbsdev.net) and save teeny.ba then save teeny.ba to\nthe PC.  On the PC, copy teeny.ba to loader.ba\n\nI've included TEENY as loader.ba.\n"
    },
    {
        "filename": "wave.do",
        "content": "add  wave  -noupdate  -expand  -group  \"TB top\" \"*\"\nadd  wave  -noupdate -group  \"DUT\"    \"dut/*\"\n\nconfigure wave -namecolwidth 200\nconfigure wave -valuecolwidth 120\nupdate\n"
    },
    {
        "filename": "TO.DO",
        "content": "| => indicates appropriate alterations have been made.\r\n* => can't be done\r\nx => don't do\r\n? => questionable\r\n\r\n===================================================================\r\n\r\n?  1.  Flash for a week or so after every new version.\r\nx  2.  NOTE command:\r\nx\tNOTE INSERT/ADD; txt\r\nx\tNOTE DELETE nn/*\r\nx\tNOTE PRINT/LIST nn/*\r\n|  3. SET command:\r\n?\tSET LOCATION/LOOK?/APPROXIMATE? y,x\r\n|  4. Allow commands before player is actually in the game:\r\n|\tHELP\r\n|\tNEWS\r\n|\tUSERS\r\n|\tGRIPE\r\n|\tPASSWORD\r\n|\tSET NAME/OUTPUT/PROMPT/TTYTYPE\r\n    Allow commands before entry into game if password is set:\r\n\tSET LOCATION\r\n\tSCAN\r\n*  5. Get speed of controlling TTY if logged on to PTY.\r\n*  6. Fix game to delete itself if it's run from a project number > 1000.\r\n   7. Extension of LIST command:\r\n\trecord with each planet the time it was captured\r\n\trecord with each base the time it was built\r\n\trecord with each ship the time it entered the game (already there?)\r\n\tallow selection of objects by time:\r\n\t\tSINCE hh:mm\r\n\t\tBEFORE hh:mm\r\n|\tLIST FEDERATION SHIPS {WITHIN} 10 {SECTORS}\r\n\tLIST ENEMY PLANETS {CAPTURED} SINCE 23:54\r\n\tLIST ENEMY SHIPS {CREATED?} BEFORE 23\r\n|\tLIST SUMMARY {OF} ENEMY BASES\r\n\tLIST ENEMY BASES {BUILT} SINCE -0:5\r\n   8. Add records for highest score, etc., and add ratings for individual\r\n      players.\r\n?  9. Implement probation period.\r\n  10. Change program to\r\n\tDW-{F/E}{TI/RN/SL}\r\n  11. ^C during HIBER (especially long ones) can exceed max allowable\r\n      ^C count and abort.\r\n  12. Check for time limit error, and set CCFLG (and maybe reset\r\n      the time limit to 5 seconds or so).  Time limit will now be set\r\n      when a line is hung up instead of immediate disconnect!  On ALL\r\n      input, if CCFLG is set afterwards, you should ALWAYS either\r\n      return to either monitor mode or command mode.  CCFLG can be\r\n      set if\r\n\tER.ICC\t^C\t(usually the case)\r\n\tER.TLC\ttime limit or hang up\r\n? 13. Allow Ramming between ships.\r\n  14. 'Beam' scans.\r\n  15. Check out end-game (# of planets, bases).\r\n"
    },
    {
        "filename": "compile.do",
        "content": "#====================================================================================\n# UVVM Light compile script\n#\n# Compiled to library uvvm_util\n#\n# Default output directory is /sim and can be changed by passing an existing\n# direcotry as argument to this script.\n#\n#====================================================================================\n\n#-------------------------------------------------------\n# Setup\n#\n#   This section will try to setup the script for\n#   running on Modelsim and Riviera Pro simulators.\n#\n#-------------------------------------------------------\n\n#\n# Overload quietly (Modelsim specific command) to let it work in Riviera-Pro\n#\nproc quietly { args } {\n  if {[llength $args] == 0} {\n    puts \"quietly\"\n  } else {\n    # this works since tcl prompt only prints the last command given. list prints \"\".\n    uplevel $args; list;\n  }\n}\n\n#\n# Define library name, UVVM Util path and BFM path.\n#\nquietly set library_name uvvm_util\nquietly set util_path src_util\nquietly set bfm_path src_bfm\n\n#\n# Detect simulator\n#\nif {[catch {eval \"vsim -version\"} message] == 0} {\n  quietly set simulator_version [eval \"vsim -version\"]\n\n  if {[regexp -nocase {modelsim} $simulator_version]} {\n    quietly set simulator \"modelsim\"\n  } elseif {[regexp -nocase {aldec} $simulator_version]} {\n    quietly set simulator \"rivierapro\"\n  } else {\n    puts \"Unknown simulator. Attempting to use Modelsim commands.\"\n    quietly set simulator \"modelsim\"\n  }\n} else {\n    puts \"vsim -version failed with the following message:\\n $message\"\n    abort all\n}\n\n#\n# Set compilation directives for Modelsim / Riviera Pro\n#\nif { [string equal -nocase $simulator \"modelsim\"] } {\n  quietly set compdirectives \"-quiet -suppress 1346,1236,1090 -2008 -work $library_name\"\n} elseif { [string equal -nocase $simulator \"rivierapro\"] } {\n  set compdirectives \"-2008 -nowarn COMP96_0564 -nowarn COMP96_0048 -dbg -work $library_name\"\n}\n\n\n\n\n#-----------------------------------------------------------------------\n# This file may be called with 0 to 2 arguments:\n#\n#   0 args: script is called from uvvm_light/sim folder.\n#   1 args: directory for uvvm_light is specified,\n#           target will be current directory.\n#   2 args: directory for uvvm_light is specified\n#           and target directory specified.\n#-----------------------------------------------------------------------\nif { [info exists 1] } {\n  quietly set source_path \"$1\"\n\n  if {$argc == 1} {\n    echo \"\\nUser specified uvvm_light directory\"\n    quietly set target_path \".\"\n    quietly set source_path \"$1\"\n  } elseif {$argc >= 2} {\n    echo \"\\nUser specified uvvm_light and target directory\"\n    quietly set source_path \"$1\"\n    quietly set target_path \"$2\"\n  }\n  unset 1\n} else {\n  echo \"\\nDefault output directory\"\n  quietly set source_path \"..\"\n  quietly set target_path \"$source_path/sim\"\n}\n\nquietly vlib $target_path/$library_name\nquietly vmap $library_name $target_path/$library_name\n\n\n\n#-------------------------------------------------------\n# Compile UVVM Util\n#\n#    This section compiles UVVM Util to library uvvm_util.\n#    Target directory (compile directory) is /sim or\n#    user specified if script is called with argument.\n#\n#-------------------------------------------------------\necho \"\\n\\n\\n=== Compiling UVVM Util to directory: $target_path\\n\"\n\necho \"eval vcom $compdirectives $source_path/$util_path/types_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/types_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/adaptations_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/adaptations_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/string_methods_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/string_methods_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/protected_types_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/protected_types_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/global_signals_and_shared_variables_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/global_signals_and_shared_variables_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/hierarchy_linked_list_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/hierarchy_linked_list_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/alert_hierarchy_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/alert_hierarchy_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/license_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/license_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/methods_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/methods_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/bfm_common_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/bfm_common_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/generic_queue_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/generic_queue_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/data_queue_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/data_queue_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/data_fifo_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/data_fifo_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/data_stack_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/data_stack_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/rand_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/rand_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/func_cov_pkg.vhd\"\neval vcom $compdirectives $source_path/$util_path/func_cov_pkg.vhd\n\necho \"eval vcom $compdirectives $source_path/$util_path/uvvm_util_context.vhd\"\neval vcom $compdirectives $source_path/$util_path/uvvm_util_context.vhd\n\n\n\n#-------------------------------------------------------\n# Compile BFMs\n#\n#    This section compiles UVVM BFMs to library uvvm_util.\n#    Target directory (compile directory) is /sim or\n#    user specified if script is called with argument.\n#\n#-------------------------------------------------------\necho \"\\n\\n\\n=== Compiling UVVM BFMs to directory: $target_path\\n\"\n\n#\n# Search for all VHD files in /src_bfm folder.\n#\nquietly set vhd_files [glob -directory \"$source_path/$bfm_path/\" -- \"*.vhd\"]\n\n\n#\n# Compile all VHD files found in the /src_bfm folder.\n#\nforeach vhd_file $vhd_files {\n  echo \"eval vcom $compdirectives  $vhd_file\"\n  eval vcom $compdirectives  $vhd_file\n}\n"
    }
]